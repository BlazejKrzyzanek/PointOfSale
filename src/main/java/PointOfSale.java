import javafx.application.Application;
import javafx.beans.value.ObservableValue;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class PointOfSale extends Application {


    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage){
        GridPane gridPane = new GridPane();
        gridPane.setAlignment(Pos.CENTER);
        gridPane.setHgap(10);
        gridPane.setVgap(10);
        gridPane.setPadding(new Insets(10, 10, 10, 10));

        final Label lcdDisplayLabel = new Label("LCD display");
        final TextArea lcdDisplayTextArea = new TextArea();
        final Label printerLabel = new Label("Printer");
        final TextArea printerTextArea = new TextArea();

        final Label barcodeLabel = new Label("Barcode:");
        final TextField barcodeTextField = new TextField();
        final Button scanButton = new Button("Scan");

        final Label barcodeSourceLabel = new Label("Barcode source:");
        final ToggleGroup barcodeSourceGroup = new ToggleGroup();
        final RadioButton barcodeFromTextFieldRadioButton = new RadioButton("text field");
        final RadioButton barcodeAutoGeneratedRadioButton = new RadioButton("auto-generated");

        final Button exitButton = new Button("exit");

        // Initializing cash register with output devices
        final CashRegister cashRegister = new CashRegister(lcdDisplayTextArea, printerTextArea);
        cashRegister.connectWithDatabase();


        // Creating view
        gridPane.add(lcdDisplayLabel, 0, 0);
        lcdDisplayTextArea.setPrefHeight(50);
        lcdDisplayTextArea.setPrefWidth(300);
        lcdDisplayTextArea.setEditable(false);
        gridPane.add(lcdDisplayTextArea, 0, 1, 3, 1);

        gridPane.add(printerLabel, 4, 0);
        printerTextArea.setPrefWidth(250);
        printerTextArea.setPrefHeight(300);
        printerTextArea.setEditable(false);
        gridPane.add(printerTextArea, 4, 1, 1, 4);

        gridPane.add(barcodeLabel, 0, 2);
        barcodeTextField.setPromptText("Barcode as 9 digits");
        gridPane.add(barcodeTextField, 1, 2);
        barcodeTextField.setDisable(true);

        scanButton.setPrefWidth(50);
        gridPane.add(scanButton, 2, 2);

        gridPane.add(barcodeSourceLabel, 0, 3);
        GridPane pane = new GridPane();
        pane.setVgap(10);
        pane.add(barcodeFromTextFieldRadioButton, 0, 0);
        pane.add(barcodeAutoGeneratedRadioButton, 0, 1);
        gridPane.add(pane, 1, 3);

        exitButton.setPrefWidth(50);
        gridPane.add(exitButton, 2, 3);


        // Scanning barcode events handling
        barcodeTextField.setOnAction(event -> {
                    if (barcodeSourceGroup.getSelectedToggle().getUserData().equals("auto-generated")) {
                        cashRegister.processProduct();
                    } else
                        cashRegister.processProduct(barcodeTextField.getCharacters().toString());
                }
        );
        scanButton.setOnAction(event -> {
                    if (barcodeSourceGroup.getSelectedToggle().getUserData().equals("auto-generated"))
                        cashRegister.processProduct();
                    else
                        cashRegister.processProduct(barcodeTextField.getCharacters().toString());
                }
        );


        // Barcode source choosing
        barcodeFromTextFieldRadioButton.setUserData("text field");
        barcodeFromTextFieldRadioButton.setToggleGroup(barcodeSourceGroup);

        barcodeAutoGeneratedRadioButton.setUserData("auto-generated");
        barcodeAutoGeneratedRadioButton.setToggleGroup(barcodeSourceGroup);
        barcodeAutoGeneratedRadioButton.setSelected(true);


        barcodeSourceGroup.selectedToggleProperty().addListener(
                (ObservableValue<? extends Toggle> ov, Toggle old_toggle, Toggle new_toggle) -> {
                    if (barcodeSourceGroup.getSelectedToggle() != null) {
                        if (barcodeSourceGroup.getSelectedToggle().getUserData().equals("auto-generated")) {
                            barcodeTextField.setDisable(true);
                        } else {
                            barcodeTextField.setDisable(false);
                        }
                    }
                }
        );

        // Receipt handling
        exitButton.setOnAction(event -> cashRegister.exit());

        Scene scene = new Scene(gridPane, 640, 400);

        primaryStage.setTitle("Point of sale");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}
